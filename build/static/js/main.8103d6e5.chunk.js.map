{"version":3,"sources":["store/reducer.ts","components/Players.tsx","components/Board.tsx","components/AwardPoints.tsx","components/Scoreboard.tsx","components/RoundButtons.tsx","App.tsx","store/index.ts","index.tsx"],"names":["initialState","players","Array","round","pointSelected","gameSlice","createSlice","name","reducers","newGame","state","nextRound","previousRound","changePointSelected","payload","addPlayer","push","points","200","400","600","800","1000","1200","1600","2000","5000","score","givePointsToPlayer","player","find","x","actions","Players","useState","setPlayer","dispatch","useDispatch","useSelector","Fragment","map","index","type","id","placeholder","value","onInput","e","currentTarget","onKeyPress","event","key","trim","length","onClick","disabled","Board","point","className","AwardPoints","subtract","setSubtract","htmlFor","Scoreboard","collapsed","setCollapsed","role","obj","Object","entries","RoundButtons","App","localStorage","getItem","persistedState","JSON","parse","store","configureStore","reducer","rootReducer","preloadedState","subscribe","setItem","stringify","getState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8103d6e5.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\nexport type Points = [\r\n  {\r\n    200: number,\r\n    400: number,\r\n    600: number,\r\n    800: number,\r\n    1000: number\r\n  },\r\n  {\r\n    400: number,\r\n    800: number,\r\n    1200: number,\r\n    1600: number,\r\n    2000: number\r\n  },\r\n  {\r\n    5000: number\r\n  }\r\n];\r\n\r\ninterface Player {\r\n  name: string;\r\n  points: Points;\r\n  score: number;\r\n}\r\n\r\ninterface AwardPoints {\r\n  player: Player,\r\n  points: number\r\n}\r\n\r\nconst NewPlayer = (name: string): Player => {\r\n  return {\r\n    name: name,\r\n    points: [\r\n      {\r\n          200: 0,\r\n          400: 0,\r\n          600: 0,\r\n          800: 0,\r\n          1000: 0\r\n      },\r\n      {\r\n          400: 0,\r\n          800: 0,\r\n          1200: 0,\r\n          1600: 0,\r\n          2000: 0\r\n      },\r\n      {\r\n          5000: 0\r\n      }\r\n    ],\r\n    score: 0\r\n  }\r\n}\r\n\r\nexport const initialState = {\r\n  players: Array<Player>(),\r\n  round: 0,\r\n  pointSelected: 0\r\n}\r\n\r\nconst gameSlice = createSlice({\r\n  name: \"game\",\r\n  initialState,\r\n  reducers: {\r\n    newGame: state => initialState,\r\n    nextRound: state => {\r\n      state.round++;\r\n    },\r\n    previousRound: state => {\r\n        state.round--;\r\n    },\r\n    changePointSelected: (state, {payload}: PayloadAction<number>) => {\r\n        state.pointSelected = payload\r\n    },\r\n    addPlayer: (state, {payload}: PayloadAction<string>) => {\r\n      state.players.push(NewPlayer(payload));\r\n      state.pointSelected = 0;\r\n    },\r\n    givePointsToPlayer: (state, {payload}: PayloadAction<AwardPoints>) => {\r\n      const player = state.players.find(x => x.name === payload.player.name) as Player;\r\n      player.score += payload.points;\r\n\r\n      if (payload.points < 0)\r\n        (player.points[state.round - 1] as any)[payload.points * -1]--;\r\n      else\r\n        (player.points[state.round - 1] as any)[payload.points]++;\r\n\r\n      state.pointSelected = 0;\r\n    }\r\n  }\r\n});\r\n\r\nexport const { nextRound, previousRound, changePointSelected, addPlayer, givePointsToPlayer, newGame } = gameSlice.actions;\r\n\r\nexport default gameSlice.reducer;","import React, { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { RootState } from '../store';\r\nimport { addPlayer, nextRound } from '../store/reducer';\r\n\r\nconst Players = () => {\r\n    const [player, setPlayer] = useState('');\r\n    const dispatch = useDispatch();\r\n    const { players } = useSelector((state: RootState) => state);\r\n\r\n    const handleKeyPress = (event: React.KeyboardEvent<HTMLInputElement>) => {\r\n        if (event.key === \"Enter\" && player.trim().length > 0) {\r\n            dispatch(addPlayer(player));\r\n            setPlayer('');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <h1>Jeopardy Scorecard</h1>\r\n            <h2>Players</h2>\r\n            <div>\r\n                {players.map((player, index) => (\r\n                    <p key={index}>{player.name}</p>\r\n                ))}\r\n            </div>\r\n            <input type=\"text\" id=\"newPlayerName\" placeholder=\"Player's name\" value={player} onInput={e => setPlayer(e.currentTarget.value)} onKeyPress={handleKeyPress} />\r\n            <button type=\"button\" id=\"startGame\" onClick={() => dispatch(nextRound())} disabled={players.length === 0}>PLAY JEOPARDY!</button>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Players;","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { RootState } from \"../store\";\r\nimport { changePointSelected } from \"../store/reducer\";\r\n\r\nconst Board = () => {\r\n    const dispatch = useDispatch();\r\n    const { round } = useSelector((state: RootState) => state);\r\n\r\n    const points = [ [200, 400, 600, 800, 1000], [400, 800, 1200, 1600, 2000], [5000] ];\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {points[round - 1].map((point, index) => (\r\n                <button className=\"points\" key={index} type=\"button\" value={point} onClick={() => dispatch(changePointSelected(point))}>{ point }</button>\r\n            ))}\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Board;","import { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { RootState } from \"../store\";\r\nimport { givePointsToPlayer, changePointSelected } from \"../store/reducer\";\r\n\r\nconst AwardPoints = () => {\r\n    const dispatch = useDispatch();\r\n    const [subtract, setSubtract] = useState(1);\r\n    const { players, pointSelected } = useSelector((state: RootState) => state);\r\n    \r\n    return (\r\n        <div id=\"playerCards\">\r\n            <div>\r\n                {players.map((player, index) => (\r\n                    <button className=\"playerCard\" key={index} onClick={() => dispatch(givePointsToPlayer({player: player, points: pointSelected * subtract}))} >{ player.name }</button>\r\n                ))}\r\n            </div>\r\n            <input type=\"checkbox\" id=\"subtractPoints\" />\r\n            <label htmlFor=\"subtractPoints\" onClick={() => setSubtract(subtract * -1)}>Subtract</label>\r\n            <button id=\"goBack\" onClick={() => dispatch(changePointSelected(0))}>Go Back</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AwardPoints;","import { useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../store\";\r\n\r\nconst Scoreboard = () => {\r\n    const { players } = useSelector((state: RootState) => state);\r\n    const [collapsed, setCollapsed] = useState(true);\r\n    \r\n    return (\r\n        <div id=\"scoreboard\" className={collapsed ? 'collapsed' : ''} onClick={() => setCollapsed(!collapsed)} role=\"button\">\r\n            <div id=\"scores\">\r\n                {players.map((player, index) => (\r\n                    <p key={index}>{ player.name }: { player.score }</p>\r\n                ))}\r\n            </div>\r\n            <div id=\"points\">\r\n                {players.map(player => (\r\n                    <div>\r\n                        { player.points.map((obj, index) => (\r\n                            <div>\r\n                                <p>Round {index + 1}</p>\r\n                                <ul>\r\n                                    { Object.entries(obj).map(x => (\r\n                                        <li>{x[0]}: {x[1]}</li>\r\n                                    )) }\r\n                                </ul>\r\n                            </div>\r\n                        )) }\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scoreboard;","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { RootState } from \"../store\";\r\nimport { nextRound, previousRound, newGame } from \"../store/reducer\";\r\n\r\nconst RoundButtons = () => {\r\n    const dispatch = useDispatch();\r\n    const { round } = useSelector((state: RootState) => state);\r\n\r\n    const nextButton = () => {\r\n        if (round <= 3)\r\n            return (<button type=\"button\" id=\"next\" onClick={() => dispatch(nextRound())}>Next</button>);\r\n        else\r\n            return (<button type=\"button\" id=\"next\" onClick={() => dispatch(newGame())}>New Game</button>)\r\n    }\r\n    \r\n    return (\r\n        <div id=\"roundButtons\">\r\n            <button type=\"button\" id=\"previous\" onClick={() => dispatch(previousRound())} disabled={round <= 1}>Previous</button>\r\n            {nextButton()}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RoundButtons;","import Players from './components/Players';\nimport { useSelector } from 'react-redux';\nimport { RootState } from './store';\nimport Board from './components/Board';\nimport AwardPoints from './components/AwardPoints';\nimport React from 'react';\nimport Scoreboard from './components/Scoreboard';\nimport RoundButtons from './components/RoundButtons';\n\nconst App = () => {\n  const { round, pointSelected } = useSelector((state: RootState) => state);\n\n  const display = () => {\n    if (round === 0)\n      return <Players />;\n    else if (pointSelected > 0)\n      return <AwardPoints />;\n    else\n      return (\n        <React.Fragment>\n          <Scoreboard />\n          { round <= 3 && <Board /> }\n          <RoundButtons />\n        </React.Fragment>\n      );\n  }\n\n  return (\n    <React.Fragment>\n      {display()}\n    </React.Fragment>\n  )\n}\n\nexport default App;","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport rootReducer, { initialState } from './reducer';\r\n\r\nconst state = localStorage.getItem('state');\r\nconst persistedState = state !== null ? JSON.parse(state) : initialState;\r\n\r\nconst store = configureStore({\r\n  reducer: rootReducer,\r\n  preloadedState: persistedState\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\n\r\nstore.subscribe(() => {\r\n  localStorage.setItem('state', JSON.stringify(store.getState()));\r\n});\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './App';\nimport store from './store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('container')\n);"],"sourceRoot":""}